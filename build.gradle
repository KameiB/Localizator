plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${mixin_gradle_version}"
}

version = "${mod_version}"
group = "kameib.${mod_id}"   // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${file_name}-1.12.2"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava{
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            args "--username=InDev"

            jvmArg "-Dfml.coreMods.load=${mixin_loader_class}"
            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            jvmArg "-Dfml.coreMods.load=${mixin_loader_class}"
            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

/*sourceSets.main.resources {
    //srcDir 'src/generated/resources',
    srcDir 'src/test/resources'
}*/

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    flatDir {
        dirs 'libs\\'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    //minecraft 'net.forge:forge:1.12.2-14.23.5.2859'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "org.spongepowered:mixin:${mixin_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf("curse.maven:fermiumbooter-${fermiumbooter_version}")

    // The dependency format is as follows: "curse.maven:<mod_name>-<projectid>:<fileids>"
    // The Mod Name is whatever you want to call it.
    // The Project ID is a number shown at the mod's CurseForge main page.
    // For the File ID, go to the mod's "Files" tab, then select a specific File.
    // The numbers after the last '\' in the address bar is what you are looking for.
    // See https://www.cursemaven.com/ for reference.
    compileOnly fg.deobf("curse.maven:Neat-xplat-${neat_version}")

    compileOnly fg.deobf("curse.maven:CarrotsLib-${carrotslib_version}") // Needed for ArmorUnderwear
    compileOnly fg.deobf("curse.maven:ArmorUnderwear-${armorunder_version}")

    compileOnly fg.deobf("curse.maven:FantasticLib-${fantasticlib_version}") // Needed for SetBonus
    compileOnly fg.deobf("curse.maven:SetBonus-${setbonus_version}")

    compileOnly fg.deobf("curse.maven:TschippLib-${tschipplib_version}") // Needed for ForgottenItems
    compileOnly fg.deobf("curse.maven:ForgottenItems-${forgottenitems_version}")

    compileOnly files("libs/SRParasites-1.12.2v1.9.21.jar")

    compileOnly fg.deobf("curse.maven:reach-fix-${reachfix_version}") // Needed when running BetterSurvival
    compileOnly fg.deobf("curse.maven:better-survival-mod-${bettersurvival_version}")

    compileOnly fg.deobf("curse.maven:creativecore-${creativecore_version}") // Needed for ItemPhysic_Full
    compileOnly fg.deobf("curse.maven:itemphysic-${itemphysic_version}")

    implementation fg.deobf("curse.maven:Baubles-${baubles_version}") // Needed for Bountiful Baubles
    implementation fg.deobf("curse.maven:bountifulbaubles-${bountifulbaubles_version}")

    compileOnly fg.deobf("curse.maven:RoughTweaks-${roughtweaks_version}")

    compileOnly fg.deobf("curse.maven:serene-seasons-${sereneseasons_version}")
    compileOnly fg.deobf("curse.maven:rustic-${rustic_version}")

    compileOnly fg.deobf("curse.maven:JEI-${jei_version}") // Needed for ComposterCategoryMixin, ComposterRecipeMixin
    compileOnly fg.deobf("curse.maven:charm-${charm_version}")

    compileOnly fg.deobf("curse.maven:dynamictrees-${dynamictrees_version}")

    compileOnly files("libs/Hwyla-1.8.26-B41_1.12.2.jar")

    compileOnly fg.deobf("curse.maven:corpse-complex-${corpsecomplex_version}")

    compileOnly fg.deobf("curse.maven:lycanites-mobs-${lycanitesmobs_version}")

    compileOnly fg.deobf("curse.maven:atomicstrykers-battle-towers-${battletowers_version}")

    compileOnly fg.deobf("curse.maven:callable-horses-${callablehorses_version}")
    
    compileOnly fg.deobf("curse.maven:IvToolkit-${ivtoolkit_version}")
    implementation fg.deobf("curse.maven:recurrent-complex-${recurrentcomplex_version}")

    compileOnly fg.deobf("curse.maven:ichunutil-${ichunutil_version}")

    compileOnly fg.deobf("curse.maven:varied-commodities-${variedcommodities_version}")

    compileOnly fg.deobf("curse.maven:fishing-made-better-${fishingmadebetter_version}")

    compileOnly fg.deobf("curse.maven:FBP-${fbp_version}")

    compileOnly fg.deobf("curse.maven:levelup2-${levelup2_version}")

    compileOnly fg.deobf("curse.maven:mo-bends-${mobends_version}")

    compileOnly fg.deobf("curse.maven:silentlib-${silentlib_version}") // Needed for Scaling Health
    compileOnly fg.deobf("curse.maven:scalinghealth-${scalinghealth_version}")

    compileOnly fg.deobf("curse.maven:spartan-weaponry-${spartanweaponry_version}")

    implementation fg.deobf("curse.maven:trinkets-and-baubles-${trinkets_version}")

    compileOnly fg.deobf("curse.maven:mantle-${mantle_version}") // Needed for Inspirations
    compileOnly fg.deobf("curse.maven:inspirations-${inspirations_version}")

    compileOnly fg.deobf("curse.maven:dynaores-${dynamores_version}")

    implementation fg.deobf("curse.maven:fnars-roguelike-dungeons-${roguelike_version}")

    compileOnly fg.deobf("curse.maven:morpheus-${morpheus_version}")

    compileOnly fg.deobf("curse.maven:ingameinfoxml-${ingameinfoxml_version}")
    
    implementation fg.deobf("curse.maven:mca-${mca_version}")

    implementation fg.deobf("curse.maven:dynamic-surroundings-huds-${dynsurroundingshuds_version}")

    implementation fg.deobf("curse.maven:enhancedvisuals-${enhancedvisuals_version}")

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    filesMatching('mcmod.info') {
        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_credits': mod_credits,
                'mod_author': 'KameiB'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title"       : mod_name,
            "Specification-Version"     : "1", // We are version 1 of ourselves
            "Implementation-Title"      : mod_name,
            "Implementation-Version"    : mod_version,
            "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLCorePlugin"             : "${mixin_loader_class}",
            "FMLCorePluginContainsFMLMod": "true",
            "ForceLoadAsMod": "true", //Seems to do the opposite of what it claims to do while in dev enviroment, uncomment for build
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
